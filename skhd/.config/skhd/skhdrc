lctrl + alt + cmd - return : open -na Alacritty
ctrl + alt + cmd - b : open -na "Brave Browser"
ctrl + alt + cmd - n : open -na /Applications/Visual\ Studio\ Code.app

# focus window
# lctrl + alt + cmd - h : yabai -m window --focus west
# lctrl + alt + cmd - j : yabai -m window --focus south
# lctrl + alt + cmd - k : yabai -m window --focus north
# lctrl + alt + cmd - l : yabai -m window --focus east

lctrl + alt + cmd - j : yabai -m window --focus $(yabai -m query --windows --space | jq 'sort_by(.id) | .[(to_entries | .[] | select(.value."has-focus" == true) | .key - 1) % length] | .id')
lctrl + alt + cmd - k : yabai -m window --focus $(yabai -m query --windows --space | jq 'sort_by(.id) | .[(to_entries | .[] | select(.value."has-focus" == true) | .key + 1) % length] | .id')


# swap managed window
# lctrl + alt + cmd + shift - w : yabai -m window --swap north
# lctrl + alt + cmd + shift - a : yabai -m window --swap west
# lctrl + alt + cmd + shift - s : yabai -m window --swap south
# lctrl + alt + cmd + shift - d : yabai -m window --swap east

# move managed window
# lctrl + alt + cmd + shift - h : yabai -m window --warp north
# lctrl + alt + cmd + shift - j : yabai -m window --warp west
# lctrl + alt + cmd + shift - k : yabai -m window --warp south
# lctrl + alt + cmd + shift - l : yabai -m window --warp east

lctrl + alt + cmd + shift - j : ~/.config/skhd/cycle_clockwise.sh
lctrl + alt + cmd + shift - k : ~/.config/skhd/cycle_counterclockwise.sh

# balance size of windows
# lctrl + alt + cmd - z : yabai -m space --balance

lctrl + alt + cmd - h : yabai -m window --resize left:-50:0; \
                  yabai -m window --resize right:-50:0
lctrl + alt + cmd - l : yabai -m window --resize right:50:0; \
                  yabai -m window --resize left:50:0

# fast focus desktop
lctrl + alt + cmd - 1 : yabai -m space --focus 1
lctrl + alt + cmd - 2 : yabai -m space --focus 2
lctrl + alt + cmd - 3 : yabai -m space --focus 3
lctrl + alt + cmd - 4 : yabai -m space --focus 4
lctrl + alt + cmd - 5 : yabai -m space --focus 5
lctrl + alt + cmd - 6 : yabai -m space --focus 6
lctrl + alt + cmd - 7 : yabai -m space --focus 7
lctrl + alt + cmd - 8 : yabai -m space --focus 8
lctrl + alt + cmd - 9 : yabai -m space --focus 9

# fast focus previous and next desktop
lctrl + alt + cmd - g : yabai -m space --focus prev || yabai -m space --focus last
lctrl + alt + cmd - 0x29 : yabai -m space --focus next || yabai -m space --focus first

# toggle sticky (show on all spaces)
lctrl + alt + cmd - s : yabai -m window --toggle sticky

# toggle topmost (keep above other windows)
lctrl + alt + cmd - o : yabai -m window --toggle topmost

# create and destroy spaces
# lctrl + alt + cmd - x : yabai -m space --destroy
# lctrl + alt + cmd + shift - x : yabai -m space --create

# send window to desktop and follow focus
lctrl + alt + cmd + shift - 1 : yabai -m window --space  1; yabai -m space --focus 1
lctrl + alt + cmd + shift - 2 : yabai -m window --space  2; yabai -m space --focus 2
lctrl + alt + cmd + shift - 3 : yabai -m window --space  3; yabai -m space --focus 3
lctrl + alt + cmd + shift - 4 : yabai -m window --space  4; yabai -m space --focus 4
lctrl + alt + cmd + shift - 5 : yabai -m window --space  5; yabai -m space --focus 5
lctrl + alt + cmd + shift - 6 : yabai -m window --space  6; yabai -m space --focus 6
lctrl + alt + cmd + shift - 7 : yabai -m window --space  7; yabai -m space --focus 7
lctrl + alt + cmd + shift - 8 : yabai -m window --space  8; yabai -m space --focus 8
lctrl + alt + cmd + shift - 9 : yabai -m window --space  9; yabai -m space --focus 9
# lctrl + alt + cmd + shift - 0 : yabai -m window --space  10; yabai -m space --focus 10

# send window to previous and next desktop and follow focus
# lctrl + alt + cmd + shift - pageup : yabai -m window --space  prev; yabai -m space --focus prev
# lctrl + alt + cmd + shift - pagedown : yabai -m window --space  next; yabai -m space --focus next

# focus monitor
# lctrl + alt + cmd - p : yabai -m display --focus recent

# send window to monitor and follow focus
# lctrl + alt + cmd + shift - p : yabai -m window --display recent; yabai -m display --focus recent

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20


## Close active application

lctrl + alt + cmd - q : yabai -m window --close
# resize windows
# lctrl + alt + cmd + shift - h : yabai -m window --resize left:-50:0; \
#                   yabai -m window --resize right:-50:0
# lctrl + alt + cmd + shift - j : yabai -m window --resize bottom:0:50; \
#                   yabai -m window --resize top:0:50
# lctrl + alt + cmd + shift - k : yabai -m window --resize top:0:-50; \
#                   yabai -m window --resize bottom:0:-50
# lctrl + alt + cmd + shift - l : yabai -m window --resize right:50:0; \
#                   yabai -m window --resize left:50:0

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
lctrl + alt + cmd - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# lctrl + alt + cmd - r : yabai -m window --toggle split

# float / unfloat window and center on screen
lctrl + alt + cmd + shift - space : yabai -m window --toggle float

# float / unfloat window and center on screen
# lctrl + alt + cmd - t : yabai -m window --toggle float;\
#            yabai -m window --grid 4:4:1:1:2:2

# Restart Yabai
ctrl + alt + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"; \
# lctrl + alt + cmd - backspace : osascript -e 'tell app "System Events" to log out'



#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# open terminal, blazingly fast compared to iTerm/Hyper
# cmd - return : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~

# open qutebrowser
# cmd + shift - return : ~/Scripts/qtb.sh

# #SKHD STUFF

# # if you're having troubles finding key codes for a key just type skhd --observe in a terminal and type a key. Pretty cool! Or just check the wiki.

# ## HYPER == SHIFT + CMD + ALT + OPTION

# ## Quickly restart the yabai launch agent
# ctrl + alt + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

# ## Close active application
# hyper - backspace : $(yabai -m window $(yabai -m query --windows --window | jq -re ".id") --close)
# # cycle backwards
# #hyper - i : yabai -m query --spaces | jq -re ".[] | select(.visible == 1).index" | xargs -I{} yabai -m query --windows --space {} | jq -sre "add | sort_by(.display, .frame.x, .frame.y, .id) | nth(index(map(select(.focused == 1))) - 1).id" | xargs -I{} yabai -m window --focus {}

# # test a command
# # lshift - x : terminal-notifier -message "lshift - x"
# #lshift - x : terminal-notifier -message "$(yabai -m query --windows --window | jq -re ".id")"

# ## open terminal
# #hyper - return : /Applications/iTerm.app/Contents/MacOS/iTerm2

# ## swap window
# hyper - y : yabai -m window --swap west
# # shift + alt - j : yabai -m window --swap south
# # shift + alt - k : yabai -m window --swap north
# hyper - 0x21 : yabai -m window --swap east # 0x21 is the "[" key

# ## send window to monitor and follow focus
# hyper - u : /Users/jesseskelton/CustomScripts/SwitchSpaces/moveWindowLeftAndFollowFocus.sh
# hyper - p : /Users/jesseskelton/CustomScripts/SwitchSpaces/moveWindowRightAndFollowFocus.sh

# ## focus display
# ctrl + cmd - 1 : yabai -m window --display 1 yabai -m display --focus 1
# ctrl + cmd - 2 : yabai -m window --display 2 yabai -m display --focus 2
# ctrl + cmd - 3 : yabai -m window --display 3 yabai -m display --focus 3

# ## increase window size
# #shift + alt - a : yabai -m window --resize left:-20:0
# #shift + alt - s : yabai -m window --resize bottom:0:20
# #shift + alt - w : yabai -m window --resize top:0:-20
# #shift + alt - d : yabai -m window --resize right:20:0

# ## decrease window size
# #shift + cmd - a : yabai -m window --resize left:20:0
# #shift + cmd - s : yabai -m window --resize bottom:0:-20
# #shift + cmd - w : yabai -m window --resize top:0:20
# #shift + cmd - d : yabai -m window --resize right:-20:0

# ## rotate tree 90
# hyper - r : yabai -m space --rotate 90

# ## flip the tree vertically
# hyper - 4 : yabai -m space --mirror y-axis
# # mirror tree y-axis
# #alt - y : yabai -m space --mirror y-axis
# ## mirror tree x-axis
# #alt - x : yabai -m space --mirror x-axis

# #Move active window to next space on current display
# shift + lalt + lcmd + ctrl + ralt - 1 : yabai -m query --spaces --space | jq -re ".index" | xargs -I {} bash -c "if [[ '{}' = '1' ]]; then yabai -m window --space 2; elif [[ '{}' = '2' ]]; then yabai -m window --space 1; fi"
# shift + lalt + lcmd + ctrl + ralt - 2 : yabai -m query --spaces --space | jq -re ".index" | xargs -I {} bash -c "if [[ '{}' = '3' ]]; then yabai -m window --space 4; elif [[ '{}' = '4' ]]; then yabai -m window --space 3; fi"
# shift + lalt + lcmd + ctrl + ralt - 3 : yabai -m query --spaces --space | jq -re ".index" | xargs -I {} bash -c "if [[ '{}' = '5' ]]; then yabai -m window --space 6; elif [[ '{}' = '6' ]]; then yabai -m window --space 5; fi"

# # show next space per display
# #hyper - 1 : /Users/jesseskelton/CustomScripts/SwitchSpaces/switchAndFocus.sh 1
# #hyper - 2 : /Users/jesseskelton/CustomScripts/SwitchSpaces/switchAndFocus.sh 2
# #hyper - 3 : /Users/jesseskelton/CustomScripts/SwitchSpaces/switchAndFocus.sh 3
# ctrl + alt + cmd + lshift - 1 : /Users/jesseskelton/CustomScripts/SwitchSpaces/switchAndFocusSIP.sh 1
# ctrl + alt + cmd + lshift - 2 : /Users/jesseskelton/CustomScripts/SwitchSpaces/switchAndFocusSIP.sh 2
# ctrl + alt + cmd + lshift - 3 : /Users/jesseskelton/CustomScripts/SwitchSpaces/switchAndFocusSIP.sh 3

# ## toggle window fullscreen zoom
# hyper - f : yabai -m window --toggle zoom-fullscreen

# # cycle through windows
# # cycle backwards
# #hyper - i : yabai -m query --spaces | jq -re ".[] | select(.visible == 1).index" | xargs -I{} yabai -m query --windows --space {} | jq -sre "add | sort_by(.display, .frame.x, .frame.y, .id) | nth(index(map(select(.focused == 1))) - 1).id" | xargs -I{} yabai -m window --focus {}

# #alt - p : yabai -m window --focus stack.prev || yabai -m window --focus prev || yabai -m window --focus last
# #
# # go to each window WITHOUT going into a stack
# # ctrl + alt + cmd + lshift - i : yabai -m query --spaces | jq -re ".[] | select(.visible == 1).index" | xargs -I{} yabai -m query --windows --space {} | jq -re "[.[] | select((.\"stack-index\" <= 1) and (.app != \"Hammerspoon\"))]" | jq -sre "add | sort_by(.display, .frame.x, .frame.y, .id) | nth(index(map(select(.focused == 1))) - 1).id" | xargs -I{} yabai -m window --focus {}
# ctrl + alt + cmd + lshift - i : yabai -m query --spaces | jq -re ".[] | select(.visible == 1).index" | xargs -I{} yabai -m query --windows --space {} | jq -re "[.[] | select(.app != \"Hammerspoon\")]" | jq -sre "add | sort_by(.display, .frame.x, .frame.y, .id) | nth(index(map(select(.focused == 1))) - 1).id" | xargs -I{} yabai -m window --focus {}

# # ctrl + alt + cmd + rshift - i : yabai -m window --focus stack.prev || yabai -m window --focus stack.last

# #hyper - 0x29 : yabai -m query --spaces \
# #hyper - o : yabai -m query --spaces | jq -re ".[] | select(.visible == 1).index" | xargs -I{} yabai -m query --windows --space {} | jq -sre "add | sort_by(.display, .frame.x, .frame.y, .id) | reverse | nth(index(map(select(.focused == 1))) - 1).id" | xargs -I{} yabai -m window --focus {}

# #alt - n : yabai -m window --focus stack.next || yabai -m window --focus next || yabai -m window --focus first

# # go to each window WITHOUT going into a stack
# # ctrl + alt + cmd + lshift - o : yabai -m query --spaces | jq -re ".[] | select(.visible == 1).index" | xargs -I{} yabai -m query --windows --space {} | jq -re "[.[] | select((.\"stack-index\" <= 1) and (.app != \"Hammerspoon\"))]" | jq -sre "add | sort_by(.display, .frame.x, .frame.y, .id) | reverse | nth(index(map(select(.focused == 1))) - 1).id" | xargs -I{} yabai -m window --focus {}
# ctrl + alt + cmd + lshift - o : yabai -m query --spaces | jq -re ".[] | select(.visible == 1).index" | xargs -I{} yabai -m query --windows --space {} | jq -re "[.[] | select(.app != \"Hammerspoon\")]" | jq -sre "add | sort_by(.display, .frame.x, .frame.y, .id) | reverse | nth(index(map(select(.focused == 1))) - 1).id" | xargs -I{} yabai -m window --focus {}

# # Toggle foucus on a stack
# ctrl + alt + cmd + lshift - return : yabai -m window --focus stack.next || yabai -m window --focus stack.first

# #create a stack
# # ctrl + alt + cmd + rshift - 1 : yabai -m query --windows --window | jq -re "." | xargs -I{} yabai -m window 1 --stack {}
# # stack next window onto current window
# ctrl + alt + cmd + lshift - 0x43 : window=$(yabai -m query --windows --window | jq -r '.id') && yabai -m window east --stack $window || (yabai -m window $window --toggle float && yabai -m window $window --toggle float)

# ################################################################
# ############################# UNUSED ###########################
# ################################################################

# ## float / unfloat window and center on screen
# #alt - t : yabai -m window --toggle float;\
# #yabai -m window --grid 4:4:1:1:2:2 ## toggle sticky alt - s : yabai -m window --toggle sticky ## toggle sticky, float and resize to picture-in-picture size alt - p : yabai -m window --toggle sticky;\ yabai -m window --grid 5:5:4:0:1:1 ## change layout of desktop ctrl + alt - a : yabai -m space --layout bsp ctrl + alt - d : yabai -m space --layout float

# ## toggle window split type
# #alt - e : yabai -m window --toggle split

# ## toggle window border
# #shift + alt - b : yabai -m window --toggle border

# ## create desktop, move window and follow focus
# #shift + cmd - n : yabai -m space --create && \
# #index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
# #yabai -m window --space "${index}" && \
# #yabai -m space --focus "${index}"

# ## create desktop and follow focus
# #shift + alt - n : yabai -m space --create && \
# #index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
# #yabai -m space --focus "${index}"

# ## destroy desktop
# #cmd + alt - w : yabai -m space --destroy

# ## fast focus desktop
# #cmd + alt - x : yabai -m space --focus last
# #cmd + alt - z : yabai -m space --focus prev
# #cmd + alt - c : yabai -m space --focus next
# #cmd + alt - 1 : yabai -m space --focus 1
# #cmd + alt - 2 : yabai -m space --focus 2
# #cmd + alt - 3 : yabai -m space --focus 3
# #cmd + alt - 4 : yabai -m space --focus 4
# #cmd + alt - 5 : yabai -m space --focus 5
# #cmd + alt - 6 : yabai -m space --focus 6
# #cmd + alt - 7 : yabai -m space --focus 7
# #cmd + alt - 8 : yabai -m space --focus 8
# #cmd + alt - 9 : yabai -m space --focus 9
# #cmd + alt - 0 : yabai -m space --focus 10

# ## move window
# #shift + ctrl - a : yabai -m window --move rel:-20:0
# #shift + ctrl - s : yabai -m window --move rel:0:20
# #shift + ctrl - w : yabai -m window --move rel:0:-20
# #shift + ctrl - d : yabai -m window --move rel:20:0

# ## Swap window
# # hyper - y : yabai -m window --warp west
# # shift + cmd - j : yabai -m window --warp south
# # shift + cmd - k : yabai -m window --warp north
# # hyper - 0x21 : yabai -m window --warp east # "[" key

# ## focus monitor
# #ctrl + alt - x  : yabai -m display --focus last
# #ctrl + alt - z  : yabai -m display --focus prev || yabai -m display --focus last
# #ctrl + alt - c  : yabai -m display --focus next || yabai -m display --focus first
# #ctrl + alt - 1  : yabai -m display --focus 1
# #ctrl + alt - 2  : yabai -m display --focus 2
# #ctrl + alt - 3  : yabai -m display --focus 3

